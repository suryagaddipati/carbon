// Gradle build script for generating ANTLR parsers in multiple languages

plugins {
    id 'antlr'
    id 'java'
    id 'maven-publish'
}

group = 'com.copper'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.13.1'
    implementation 'org.antlr:antlr4-runtime:4.13.1'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

// Configure ANTLR plugin
generateGrammarSource {
    arguments += [
        '-visitor',
        '-listener', 
        '-package', 'com.copper.parser',
        '-Dlanguage=Java'
    ]
    outputDirectory = file("build/generated-src/antlr/main/com/copper/parser")
}

// Task to generate Python parser
task generatePythonParser(type: Exec) {
    group = 'antlr'
    description = 'Generate Python3 parser from ANTLR grammar'
    
    workingDir file('antlr')
    commandLine 'antlr4', '-Dlanguage=Python3', '-visitor', '-listener', 
                '-o', '../build/python/', 'Copper.g4'
}

// Task to generate JavaScript parser
task generateJavaScriptParser(type: Exec) {
    group = 'antlr'
    description = 'Generate JavaScript parser from ANTLR grammar'
    
    workingDir file('antlr')
    commandLine 'antlr4', '-Dlanguage=JavaScript', '-visitor', '-listener',
                '-o', '../build/javascript/', 'Copper.g4'
}

// Task to generate C# parser
task generateCSharpParser(type: Exec) {
    group = 'antlr'
    description = 'Generate C# parser from ANTLR grammar'
    
    workingDir file('antlr')
    commandLine 'antlr4', '-Dlanguage=CSharp', '-visitor', '-listener',
                '-o', '../build/csharp/', 'Copper.g4'
}

// Task to generate Go parser
task generateGoParser(type: Exec) {
    group = 'antlr'
    description = 'Generate Go parser from ANTLR grammar'
    
    workingDir file('antlr')
    commandLine 'antlr4', '-Dlanguage=Go', '-visitor', '-listener',
                '-o', '../build/go/', 'Copper.g4'
}

// Task to generate C++ parser
task generateCppParser(type: Exec) {
    group = 'antlr'
    description = 'Generate C++ parser from ANTLR grammar'
    
    workingDir file('antlr')
    commandLine 'antlr4', '-Dlanguage=Cpp', '-visitor', '-listener',
                '-o', '../build/cpp/', 'Copper.g4'
}

// Task to generate all parsers
task generateAllParsers {
    group = 'antlr'
    description = 'Generate parsers for all supported languages'
    
    dependsOn generateGrammarSource
    dependsOn generatePythonParser
    dependsOn generateJavaScriptParser
    dependsOn generateCSharpParser
    dependsOn generateGoParser
    dependsOn generateCppParser
}

// Task to test grammar against example files
task testGrammar(type: JavaExec) {
    group = 'verification'
    description = 'Test ANTLR grammar against example Copper files'
    
    dependsOn generateGrammarSource
    dependsOn compileJava
    
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.antlr.v4.gui.TestRig'
    args = ['com.copper.parser.Copper', 'program', '-gui']
    
    // Add example files as arguments
    file('../examples').listFiles()
        .findAll { it.name.endsWith('.copper') }
        .each { args += it.absolutePath }
}

// Configure Java compilation
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

// Configure test framework
test {
    useJUnitPlatform()
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Configure JAR
jar {
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(
            'Main-Class': 'com.copper.parser.CopperParserMain',
            'Implementation-Title': 'Copper ANTLR Parser',
            'Implementation-Version': project.version
        )
    }
}

// Configure Maven publishing
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            pom {
                name = 'Copper ANTLR Parser'
                description = 'ANTLR4-generated parser for the Copper metadata language'
                url = 'https://github.com/copper-lang/copper'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
            }
        }
    }
}

// Clean up generated files
clean {
    delete fileTree('build/generated-src')
    delete fileTree('build/python')
    delete fileTree('build/javascript')
    delete fileTree('build/csharp')
    delete fileTree('build/go')
    delete fileTree('build/cpp')
}