# Copper Language Grammar (EBNF)
# A DAX-based metadata format inspired by LookML

program = { statement } ;

statement = model_statement | view_statement | comment ;

comment = "#" { any_character } newline ;

# Model Statements
model_statement = "model" ":" identifier "{" { model_body } "}" ;

model_body = dimension_statement | measure_statement | comment ;

dimension_statement = "dimension" ":" identifier "{" { dimension_parameter } "}" ;

measure_statement = "measure" ":" identifier "{" { measure_parameter } "}" ;

# View Statements  
view_statement = "view" ":" identifier "{" { view_body } "}" ;

view_body = from_statement | join_statement | extends_statement | extension_statement | comment ;

from_statement = "from" ":" identifier ;

join_statement = "join" ":" identifier "{" { join_parameter } "}" ;

extends_statement = "extends" ":" "[" identifier_list "]" ;

extension_statement = "extension" ":" ("required" | "optional") ;

# Dimension Parameters
dimension_parameter = 
    type_parameter |
    expression_parameter |
    primary_key_parameter |
    value_format_parameter |
    label_parameter |
    description_parameter |
    hidden_parameter |
    tiers_parameter |
    sql_latitude_parameter |
    sql_longitude_parameter |
    units_parameter |
    comment ;

type_parameter = "type" ":" dimension_type ;

dimension_type = 
    "string" | "number" | "date" | "date_time" | "yesno" | 
    "tier" | "bin" | "location" | "zipcode" | "distance" |
    "duration" | "time" | "unquoted" ;

# Measure Parameters
measure_parameter =
    measure_type_parameter |
    expression_parameter |
    value_format_parameter |
    label_parameter |
    description_parameter |
    hidden_parameter |
    comment ;

measure_type_parameter = "type" ":" measure_type ;

measure_type = 
    "count" | "sum" | "average" | "min" | "max" | 
    "count_distinct" | "median" | "percentile" | "number" ;

# Join Parameters
join_parameter =
    join_type_parameter |
    relationship_parameter |
    expression_parameter |
    comment ;

join_type_parameter = "type" ":" join_type ;

join_type = "left_outer" | "inner" | "full_outer" | "cross" ;

relationship_parameter = "relationship" ":" relationship_type ;

relationship_type = "one_to_one" | "many_to_one" | "one_to_many" | "many_to_many" ;

# Common Parameters
expression_parameter = "expression" ":" dax_expression ";;" ;

primary_key_parameter = "primary_key" ":" boolean_value ;

value_format_parameter = "value_format" ":" (string_literal | format_name) ;

label_parameter = "label" ":" string_literal ;

description_parameter = "description" ":" string_literal ;

hidden_parameter = "hidden" ":" boolean_value ;

tiers_parameter = "tiers" ":" "[" (string_list | number_list) "]" ;

sql_latitude_parameter = "sql_latitude" ":" dax_expression ";;" ;

sql_longitude_parameter = "sql_longitude" ":" dax_expression ";;" ;

units_parameter = "units" ":" ("miles" | "kilometers" | "meters" | "feet") ;

# DAX Expression Reference
# DAX expressions are defined in dax.ebnf - include that grammar file for full DAX support
dax_expression = ? See dax.ebnf for complete DAX expression grammar ? ;

# Identifiers and Literals
identifier = letter { letter | digit | "_" } ;

table_name = identifier ;

column_name = identifier ;

string_literal = "\"" { string_character } "\"" ;

string_character = any_character - "\"" | "\\\"" ;

number_literal = [ "-" ] digit { digit } [ "." digit { digit } ] ;

boolean_literal = "true" | "false" | "yes" | "no" ;

boolean_value = boolean_literal ;

format_name = 
    "usd" | "eur" | "gbp" | 
    "percent_1" | "percent_2" |
    "decimal_0" | "decimal_1" | "decimal_2" |
    "id" ;

# Lists
identifier_list = identifier { "," identifier } ;

string_list = string_literal { "," string_literal } ;

number_list = number_literal { "," number_literal } ;

# Basic Tokens
letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" |
         "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" |
         "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" |
         "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

any_character = ? any Unicode character ? ;

newline = "\n" | "\r\n" | "\r" ;

whitespace = " " | "\t" | newline ;

# Whitespace and Comments are ignored between tokens
? whitespace and comments are ignored between tokens ?